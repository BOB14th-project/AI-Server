{
  "patterns": [
    {
      "type": "crypto_pattern",
      "category": "OpenSSL_RSA",
      "content": "OpenSSL RSA functions: RSA_generate_key(), RSA_generate_key_ex(), RSA_public_encrypt(), RSA_private_decrypt(). RSA is vulnerable to quantum computers.",
      "confidence": 1.0,
      "source": "OpenSSL_Documentation",
      "keywords": ["RSA_generate_key", "RSA_generate_key_ex", "RSA_public_encrypt", "RSA_private_decrypt", "RSA_sign", "RSA_verify"],
      "file_extensions": [".c", ".cpp", ".h", ".hpp"],
      "severity": "high"
    },
    {
      "type": "crypto_pattern",
      "category": "OpenSSL_ECDSA",
      "content": "OpenSSL ECDSA functions: ECDSA_sign(), ECDSA_verify(), EC_KEY_generate_key(), EC_GROUP_new_by_curve_name(NID_secp256k1). ECDSA is quantum-vulnerable.",
      "confidence": 0.95,
      "source": "OpenSSL_EC",
      "keywords": ["ECDSA_sign", "ECDSA_verify", "EC_KEY_generate_key", "EC_GROUP_new_by_curve_name", "NID_secp256k1", "NID_X9_62_prime256v1"],
      "file_extensions": [".c", ".cpp", ".h"],
      "severity": "high"
    },
    {
      "type": "crypto_pattern",
      "category": "OpenSSL_DH",
      "content": "OpenSSL Diffie-Hellman: DH_generate_key(), DH_compute_key(), DH_generate_parameters_ex(). DH key exchange is quantum-vulnerable.",
      "confidence": 1.0,
      "source": "OpenSSL_DH",
      "keywords": ["DH_generate_key", "DH_compute_key", "DH_generate_parameters", "DH_new"],
      "file_extensions": [".c", ".cpp", ".h"],
      "severity": "high"
    },
    {
      "type": "crypto_pattern",
      "category": "OpenSSL_DSA",
      "content": "OpenSSL DSA functions: DSA_generate_parameters(), DSA_generate_key(), DSA_sign(), DSA_verify(). DSA is quantum-vulnerable.",
      "confidence": 1.0,
      "source": "OpenSSL_DSA",
      "keywords": ["DSA_generate_parameters", "DSA_generate_key", "DSA_sign", "DSA_verify", "DSA_do_sign"],
      "file_extensions": [".c", ".cpp", ".h"],
      "severity": "critical"
    },
    {
      "type": "crypto_pattern",
      "category": "OpenSSL_ECDH",
      "content": "OpenSSL ECDH: ECDH_compute_key(), EC_KEY structure usage. ECDH is elliptic curve-based and quantum-vulnerable.",
      "confidence": 0.9,
      "source": "OpenSSL_ECDH",
      "keywords": ["ECDH_compute_key", "EC_KEY", "ECDH_size"],
      "file_extensions": [".c", ".cpp", ".h"],
      "severity": "high"
    },
    {
      "type": "crypto_pattern",
      "category": "EVP_RSA",
      "content": "OpenSSL EVP RSA: EVP_PKEY_CTX_new_id(EVP_PKEY_RSA, ...), EVP_PKEY_keygen(), EVP_PKEY_encrypt(). EVP API's RSA is also quantum-vulnerable.",
      "confidence": 0.95,
      "source": "OpenSSL_EVP",
      "keywords": ["EVP_PKEY_RSA", "EVP_PKEY_keygen", "EVP_PKEY_encrypt", "EVP_PKEY_decrypt", "EVP_PKEY_CTX_new_id"],
      "file_extensions": [".c", ".cpp"],
      "severity": "high"
    },
    {
      "type": "library_pattern",
      "category": "Libgcrypt_RSA",
      "content": "Libgcrypt RSA: gcry_pk_genkey() with RSA, gcry_pk_encrypt(). Libgcrypt's RSA is also quantum-vulnerable.",
      "confidence": 0.9,
      "source": "Libgcrypt",
      "keywords": ["gcry_pk_genkey", "gcry_pk_encrypt", "gcry_pk_decrypt", "GCRY_PK_RSA"],
      "file_extensions": [".c", ".cpp"],
      "severity": "high"
    },
    {
      "type": "library_pattern",
      "category": "Crypto++_RSA",
      "content": "Crypto++ RSA: CryptoPP::RSA::PrivateKey, CryptoPP::RSAES_OAEP_SHA_Encryptor. Crypto++'s RSA is also quantum-vulnerable.",
      "confidence": 0.9,
      "source": "CryptoPP",
      "keywords": ["CryptoPP::RSA", "RSAES_OAEP", "RSASSA_PKCS1v15", "InvertibleRSAFunction"],
      "file_extensions": [".cpp", ".h"],
      "severity": "high"
    },
    {
      "type": "library_pattern",
      "category": "mbedTLS_RSA",
      "content": "mbedTLS RSA: mbedtls_rsa_gen_key(), mbedtls_rsa_public(), mbedtls_rsa_private(). mbedTLS's RSA is also quantum-vulnerable.",
      "confidence": 0.9,
      "source": "mbedTLS",
      "keywords": ["mbedtls_rsa_gen_key", "mbedtls_rsa_public", "mbedtls_rsa_private", "mbedtls_rsa_init"],
      "file_extensions": [".c", ".h"],
      "severity": "high"
    },
    {
      "type": "library_pattern",
      "category": "WolfSSL_RSA",
      "content": "wolfSSL RSA: wc_RsaPublicEncrypt(), wc_RsaPrivateDecrypt(), wc_MakeRsaKey(). wolfSSL's RSA is also quantum-vulnerable.",
      "confidence": 0.9,
      "source": "WolfSSL",
      "keywords": ["wc_RsaPublicEncrypt", "wc_RsaPrivateDecrypt", "wc_MakeRsaKey", "wc_RsaSSL_Sign"],
      "file_extensions": [".c", ".h"],
      "severity": "high"
    },
    {
      "type": "crypto_pattern",
      "category": "Windows_CryptoAPI",
      "content": "Windows CryptoAPI RSA: CryptGenKey(hProv, CALG_RSA_KEYX, ...), CryptEncrypt(), CryptDecrypt(). Windows CryptoAPI's RSA is also quantum-vulnerable.",
      "confidence": 0.95,
      "source": "Windows_CryptoAPI",
      "keywords": ["CryptGenKey", "CALG_RSA_KEYX", "CALG_RSA_SIGN", "CryptEncrypt", "CryptDecrypt"],
      "file_extensions": [".c", ".cpp"],
      "severity": "high"
    },
    {
      "type": "crypto_pattern",
      "category": "Windows_CNG",
      "content": "Windows CNG RSA: BCryptGenerateKeyPair(BCRYPT_RSA_ALGORITHM, ...), BCryptEncrypt(). Windows CNG's RSA is also quantum-vulnerable.",
      "confidence": 0.9,
      "source": "Windows_CNG",
      "keywords": ["BCryptGenerateKeyPair", "BCRYPT_RSA_ALGORITHM", "BCRYPT_ECDSA_ALGORITHM", "BCryptEncrypt", "BCryptDecrypt"],
      "file_extensions": [".c", ".cpp"],
      "severity": "high"
    },
    {
      "type": "safe_pattern",
      "category": "AES_Implementation",
      "content": "AES symmetric cipher: EVP_aes_256_gcm(), AES_set_encrypt_key(). AES is symmetric and relatively safe, but 256-bit keys are recommended.",
      "confidence": 0.7,
      "source": "OpenSSL_AES",
      "keywords": ["EVP_aes_256_gcm", "EVP_aes_256_cbc", "AES_set_encrypt_key", "AES_encrypt"],
      "file_extensions": [".c", ".cpp"],
      "severity": "low"
    }
  ]
}
