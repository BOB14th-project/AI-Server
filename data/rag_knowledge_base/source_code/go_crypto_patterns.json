{
  "patterns": [
    {
      "type": "crypto_pattern",
      "category": "Go_RSA",
      "content": "Go RSA key generation: rsa.GenerateKey(rand.Reader, 2048), rsa.EncryptOAEP(), rsa.DecryptOAEP(). Go's RSA is also vulnerable to quantum computers.",
      "confidence": 1.0,
      "source": "Go_Crypto_RSA",
      "keywords": ["rsa.GenerateKey", "rsa.EncryptOAEP", "rsa.DecryptOAEP", "rsa.SignPKCS1v15", "rsa.SignPSS"],
      "file_extensions": [".go"],
      "severity": "high"
    },
    {
      "type": "crypto_pattern",
      "category": "Go_ECDSA",
      "content": "Go ECDSA signature: ecdsa.GenerateKey(elliptic.P256(), rand.Reader), ecdsa.Sign(), ecdsa.Verify(). ECDSA is quantum-vulnerable.",
      "confidence": 0.95,
      "source": "Go_Crypto_ECDSA",
      "keywords": ["ecdsa.GenerateKey", "ecdsa.Sign", "ecdsa.Verify", "elliptic.P256", "elliptic.P384", "elliptic.P521"],
      "file_extensions": [".go"],
      "severity": "high"
    },
    {
      "type": "crypto_pattern",
      "category": "Go_DSA",
      "content": "Go DSA signature: dsa.GenerateParameters(), dsa.GenerateKey(), dsa.Sign(), dsa.Verify(). DSA is quantum-vulnerable.",
      "confidence": 1.0,
      "source": "Go_Crypto_DSA",
      "keywords": ["dsa.GenerateParameters", "dsa.GenerateKey", "dsa.Sign", "dsa.Verify"],
      "file_extensions": [".go"],
      "severity": "critical"
    },
    {
      "type": "crypto_pattern",
      "category": "Go_X509_RSA",
      "content": "Go X.509 RSA certificates: x509.CreateCertificate() with RSA key, x509.ParsePKCS1PrivateKey(). RSA certificates are quantum-vulnerable.",
      "confidence": 0.9,
      "source": "Go_X509",
      "keywords": ["x509.CreateCertificate", "x509.ParsePKCS1PrivateKey", "x509.MarshalPKCS1PrivateKey", "SignatureAlgorithm"],
      "file_extensions": [".go"],
      "severity": "high"
    },
    {
      "type": "crypto_pattern",
      "category": "Go_TLS_RSA",
      "content": "Go TLS RSA: tls.Config with RSA certificates, tls.Certificate loaded with RSA key. TLS RSA is quantum-vulnerable.",
      "confidence": 0.85,
      "source": "Go_TLS",
      "keywords": ["tls.Config", "tls.Certificate", "tls.LoadX509KeyPair", "CipherSuites"],
      "file_extensions": [".go"],
      "severity": "high"
    },
    {
      "type": "library_pattern",
      "category": "Go_JWT_RS256",
      "content": "Go JWT RS256: jwt.SigningMethodRS256, token.SignedString(rsaPrivateKey). JWT's RS256, ES256 are quantum-vulnerable.",
      "confidence": 1.0,
      "source": "Go_JWT_Library",
      "keywords": ["jwt.SigningMethodRS256", "jwt.SigningMethodRS384", "jwt.SigningMethodRS512", "jwt.SigningMethodES256", "jwt.SigningMethodES384"],
      "file_extensions": [".go"],
      "severity": "critical"
    },
    {
      "type": "library_pattern",
      "category": "Go_SSH_RSA",
      "content": "Go SSH RSA keys: ssh.ParsePrivateKey() with RSA, ssh.PublicKeys() with RSA signer. SSH RSA is quantum-vulnerable.",
      "confidence": 0.9,
      "source": "Go_SSH",
      "keywords": ["ssh.ParsePrivateKey", "ssh.PublicKeys", "ssh.Signer", "ssh.NewSignerFromKey"],
      "file_extensions": [".go"],
      "severity": "high"
    },
    {
      "type": "crypto_pattern",
      "category": "Go_ECDH",
      "content": "Go ECDH key exchange: ecdh.P256().GenerateKey(), sharedSecret = privateKey.ECDH(publicKey). ECDH is quantum-vulnerable.",
      "confidence": 0.9,
      "source": "Go_ECDH",
      "keywords": ["ecdh.P256", "ecdh.P384", "ecdh.P521", "GenerateKey", "ECDH"],
      "file_extensions": [".go"],
      "severity": "high"
    },
    {
      "type": "safe_pattern",
      "category": "Go_ChaCha20",
      "content": "Go ChaCha20-Poly1305: chacha20poly1305.New(), aead.Seal(). ChaCha20 is symmetric and relatively safe.",
      "confidence": 0.7,
      "source": "Go_ChaCha20",
      "keywords": ["chacha20poly1305.New", "chacha20poly1305.NewX", "aead.Seal", "aead.Open"],
      "file_extensions": [".go"],
      "severity": "low"
    },
    {
      "type": "safe_pattern",
      "category": "Go_AES_GCM",
      "content": "Go AES-GCM: aes.NewCipher(), cipher.NewGCM(). AES is symmetric and relatively safe, but 256-bit keys are recommended.",
      "confidence": 0.7,
      "source": "Go_AES",
      "keywords": ["aes.NewCipher", "cipher.NewGCM", "cipher.NewCBCEncrypter"],
      "file_extensions": [".go"],
      "severity": "low"
    },
    {
      "type": "crypto_pattern",
      "category": "Go_Ed25519",
      "content": "Go Ed25519 signature: ed25519.GenerateKey(), ed25519.Sign(), ed25519.Verify(). Ed25519 is currently recommended but still quantum-vulnerable.",
      "confidence": 0.8,
      "source": "Go_Ed25519",
      "keywords": ["ed25519.GenerateKey", "ed25519.Sign", "ed25519.Verify", "ed25519.NewKeyFromSeed"],
      "file_extensions": [".go"],
      "severity": "medium"
    }
  ]
}
