{
  "patterns": [
    {
      "type": "crypto_pattern",
      "category": "NodeJS_Crypto_RSA",
      "content": "Node.js crypto module RSA: crypto.generateKeyPairSync('rsa', { modulusLength: 2048 }); crypto.privateEncrypt(). RSA is vulnerable to quantum computers.",
      "confidence": 1.0,
      "source": "NodeJS_Crypto_Module",
      "keywords": ["crypto.generateKeyPairSync('rsa')", "crypto.generateKeyPair('rsa')", "crypto.privateEncrypt", "crypto.publicEncrypt"],
      "file_extensions": [".js", ".ts", ".mjs"],
      "severity": "high"
    },
    {
      "type": "crypto_pattern",
      "category": "NodeJS_ECDSA",
      "content": "Node.js ECDSA signature: crypto.generateKeyPairSync('ec', { namedCurve: 'secp256k1' }); crypto.sign('sha256', data, privateKey). ECDSA is quantum-vulnerable.",
      "confidence": 0.95,
      "source": "NodeJS_EC",
      "keywords": ["crypto.generateKeyPairSync('ec')", "namedCurve", "secp256k1", "prime256v1", "crypto.sign"],
      "file_extensions": [".js", ".ts"],
      "severity": "high"
    },
    {
      "type": "crypto_pattern",
      "category": "WebCrypto_RSA",
      "content": "Web Crypto API RSA: window.crypto.subtle.generateKey({name: 'RSA-OAEP', modulusLength: 2048}, ...); subtle.encrypt(). Browser RSA is also quantum-vulnerable.",
      "confidence": 1.0,
      "source": "WebCrypto_API",
      "keywords": ["crypto.subtle.generateKey", "RSA-OAEP", "RSA-PSS", "RSASSA-PKCS1-v1_5", "modulusLength"],
      "file_extensions": [".js", ".ts", ".html"],
      "severity": "high"
    },
    {
      "type": "crypto_pattern",
      "category": "WebCrypto_ECDSA",
      "content": "Web Crypto ECDSA: crypto.subtle.generateKey({name: 'ECDSA', namedCurve: 'P-256'}, ...); subtle.sign({name: 'ECDSA', hash: 'SHA-256'}). ECDSA is quantum-vulnerable.",
      "confidence": 0.95,
      "source": "WebCrypto_ECDSA",
      "keywords": ["crypto.subtle.generateKey", "ECDSA", "P-256", "P-384", "P-521"],
      "file_extensions": [".js", ".ts"],
      "severity": "high"
    },
    {
      "type": "crypto_pattern",
      "category": "NodeJS_DiffieHellman",
      "content": "Node.js Diffie-Hellman: crypto.createDiffieHellman(2048); crypto.getDiffieHellman('modp15'). DH key exchange is quantum-vulnerable.",
      "confidence": 1.0,
      "source": "NodeJS_DH",
      "keywords": ["crypto.createDiffieHellman", "crypto.getDiffieHellman", "modp14", "modp15", "modp16"],
      "file_extensions": [".js", ".ts"],
      "severity": "high"
    },
    {
      "type": "crypto_pattern",
      "category": "WebCrypto_ECDH",
      "content": "Web Crypto ECDH: crypto.subtle.generateKey({name: 'ECDH', namedCurve: 'P-256'}, ...); subtle.deriveBits(). ECDH is quantum-vulnerable.",
      "confidence": 0.95,
      "source": "WebCrypto_ECDH",
      "keywords": ["name: 'ECDH'", "ECDH", "deriveBits", "deriveKey"],
      "file_extensions": [".js", ".ts"],
      "severity": "high"
    },
    {
      "type": "library_pattern",
      "category": "JSEncrypt_Library",
      "content": "JSEncrypt library RSA: import JSEncrypt from 'jsencrypt'; encrypt.setPublicKey(publicKey); encrypt.encrypt(). RSA-based encryption is quantum-vulnerable.",
      "confidence": 0.9,
      "source": "JSEncrypt_NPM",
      "keywords": ["JSEncrypt", "jsencrypt", "setPublicKey", "setPrivateKey", "encrypt.encrypt"],
      "file_extensions": [".js", ".ts"],
      "severity": "high"
    },
    {
      "type": "library_pattern",
      "category": "NodeRSA_Library",
      "content": "node-rsa library: const NodeRSA = require('node-rsa'); const key = new NodeRSA({b: 2048}). RSA encryption library is quantum-vulnerable.",
      "confidence": 0.95,
      "source": "NodeRSA_NPM",
      "keywords": ["node-rsa", "NodeRSA", "new NodeRSA", "key.encrypt", "key.decrypt"],
      "file_extensions": [".js", ".ts"],
      "severity": "high"
    },
    {
      "type": "library_pattern",
      "category": "Elliptic_Library",
      "content": "elliptic library: const EC = require('elliptic').ec; const ec = new EC('secp256k1'). Elliptic curve cryptography library is quantum-vulnerable.",
      "confidence": 0.9,
      "source": "Elliptic_NPM",
      "keywords": ["elliptic", "new EC", "secp256k1", "p256", "curve25519"],
      "file_extensions": [".js", ".ts"],
      "severity": "high"
    },
    {
      "type": "crypto_pattern",
      "category": "JWT_RS256",
      "content": "JWT RS256 signature: jwt.sign(payload, privateKey, { algorithm: 'RS256' }). RS256 is RSA-based and quantum-vulnerable. ES256, ES384 are also ECDSA-based and vulnerable.",
      "confidence": 1.0,
      "source": "JWT_Libraries",
      "keywords": ["jwt.sign", "algorithm: 'RS256'", "algorithm: 'RS384'", "algorithm: 'RS512'", "algorithm: 'ES256'", "algorithm: 'ES384'"],
      "file_extensions": [".js", ".ts"],
      "severity": "critical"
    },
    {
      "type": "safe_pattern",
      "category": "AES_GCM",
      "content": "AES-GCM encryption: crypto.subtle.generateKey({name: 'AES-GCM', length: 256}); subtle.encrypt({name: 'AES-GCM', iv}). AES is symmetric and relatively safe, but 256-bit is recommended.",
      "confidence": 0.7,
      "source": "WebCrypto_AES",
      "keywords": ["AES-GCM", "AES-CBC", "AES-CTR", "length: 256"],
      "file_extensions": [".js", ".ts"],
      "severity": "low"
    }
  ]
}
