{
  "patterns": [
    {
      "type": "crypto_pattern",
      "category": "RSA_pycryptodome",
      "content": "RSA key generation in pycryptodome library: from Crypto.PublicKey import RSA; key = RSA.generate(2048). This generates a 2048-bit RSA key, which is vulnerable to quantum computer attacks using Shor's Algorithm. Recommend replacing with CRYSTALS-Kyber.",
      "confidence": 0.95,
      "source": "pycryptodome_documentation_2024",
      "keywords": ["RSA.generate", "Crypto.PublicKey", "pycryptodome", "2048", "4096"],
      "file_extensions": [".py"],
      "severity": "high"
    },
    {
      "type": "crypto_pattern",
      "category": "ECDSA_cryptography",
      "content": "ECDSA implementation in cryptography library: from cryptography.hazmat.primitives.asymmetric import ec; private_key = ec.generate_private_key(ec.SECP256R1()). The SECP256R1 curve is vulnerable to quantum computers, requiring replacement with Ed25519 or future quantum-resistant signatures.",
      "confidence": 0.9,
      "source": "cryptography_library_analysis",
      "keywords": ["ec.generate_private_key", "SECP256R1", "SECP384R1", "cryptography.hazmat"],
      "file_extensions": [".py"],
      "severity": "high"
    },
    {
      "type": "safe_pattern",
      "category": "Ed25519",
      "content": "Ed25519 signature algorithm: from cryptography.hazmat.primitives.asymmetric import ed25519; private_key = ed25519.Ed25519PrivateKey.generate(). Ed25519 is currently recommended but still vulnerable to quantum computers.",
      "confidence": 0.8,
      "source": "Ed25519_analysis",
      "keywords": ["Ed25519PrivateKey", "ed25519", "EdDSA"],
      "file_extensions": [".py"],
      "severity": "medium"
    },
    {
      "type": "crypto_pattern",
      "category": "RSA_legacy",
      "content": "Legacy RSA usage pattern: import rsa; (public_key, private_key) = rsa.newkeys(1024). 1024-bit RSA is very weak and can be attacked even by classical computers. Requires immediate replacement.",
      "confidence": 1.0,
      "source": "RSA_security_analysis",
      "keywords": ["rsa.newkeys", "1024", "512"],
      "file_extensions": [".py"],
      "severity": "critical"
    },
    {
      "type": "safe_pattern",
      "category": "Kyber_implementation",
      "content": "CRYSTALS-Kyber key encapsulation: from kyber import Kyber768; kyber = Kyber768(); public_key, secret_key = kyber.keygen(). Kyber is a NIST-standardized quantum-resistant key encapsulation mechanism.",
      "confidence": 1.0,
      "source": "NIST_PQC_standards",
      "keywords": ["Kyber512", "Kyber768", "Kyber1024", "keygen", "encaps"],
      "file_extensions": [".py", ".c", ".cpp"],
      "severity": "safe"
    },
    {
      "type": "library_pattern",
      "category": "Python_Crypto_Libraries",
      "content": "Python cryptography libraries: pycryptodome, cryptography, pyOpenSSL, ecdsa, rsa. When importing these libraries, there's a high likelihood of using non-quantum-resistant cryptography.",
      "confidence": 0.8,
      "source": "library_analysis",
      "keywords": ["import cryptography", "from Crypto", "import ecdsa", "import rsa"],
      "file_extensions": [".py"],
      "severity": "medium"
    }
  ]
}
